{-----------------------------------------------}
program Cradle;

{-----------------------------------------------}
{Constant Declaration}

const TAB = ^I;
const CR = ^M;
const LF = ^J;
const KWcode: string[5] = 'xilee';
{-----------------------------------------------}
{Type Declerations}

type Symbol = string[8];
     SymTab = array[1..1000] of Symbol;
     TabPtr = ^SymTab;

{-----------------------------------------------}
{Definition of Keywords and Token Types}
const KWlist: array[1..4] of Symbol =
              ('IF', 'ELSE', 'ENDIF', 'END');
  {-----------------------------------------------}
{Table Lookup}

{if the input string matches a table entry, return the
entry index, if not, return a zero}

function Lookup(T: TabPtr; s: string; n: integer): integer;
var i: integer;
    found: boolean;
begin
     found := false;
     i := n;
     while (i > 0) and not found do
           if s = T^[i] then
           found := true
     else
         dec(i);
     Lookup := i;
end;
{------------------------------------------------}
{Variable Declarations}

var Look: char;         {Lookahead Character}
var Token: char;
Value: String[16];


{-----------------------------------------------}
{Read New Character from Input Stream}

procedure GetChar;
begin
     Read(Look);
end;

{-----------------------------------------------}
{Report an Error}
procedure Error(s: string);
begin
     Writeln;
     Writeln(^G, 'Error: ', s, '.');
end;
{-----------------------------------------------}
{Report Error and Halt!}

procedure Abort(s: string);
begin
     Error(s);
     Halt;
end;

{-----------------------------------------------}
{Report What Was Expected}

procedure Expected(s: string);
begin
     Abort(s + 'Expected');
end;

{-----------------------------------------------}
{Match a specific input Character}
procedure Match(x : char);
begin
     if Look = x then GetChar
     else Expected(''''+ x + '''');
end;

{-----------------------------------------------}
{Recognize an Alpha Character}

function IsAlpha(c: char): boolean;
begin
     IsAlpha := upcase(c) in ['A'..'Z'];
end;

{Recognize an Addop}
function isAddop(c: char): boolean;
begin
     isAddop := c in ['+','-'];
end;

{-----------------------------------------------}
{Recognize White Space}
function isWhite(c: char): boolean;
begin
     IsWhite := c in [' ', TAB] ;
end;

{-----------------------------------------------}
{Skip Over Leading White Space}
procedure SkipWhite;
begin
     while IsWhite(Look) do
           GetChar;
end;

{-----------------------------------------------}
{Recognize a Decimal Digit}

function IsDigit(c: char): boolean;
begin
     IsDigit := c in ['0'..'9']
end;
{-----------------------------------------------}
{Recognize an AlphaNumeric Character}

function isAlNum(c: char): boolean;
begin
     IsAlNum := IsAlpha(c) or IsDigit(c);
end;
{------------------------------------------------}
{Recognize any Operator}

function IsOp(c: char): boolean;
begin
     isOp := c in ['+', '-','*','/','<','>',':','='];
end;

{------------------------------------------------}
{Skip CRLF}

procedure Fin;
begin
     if Look = CR then GetChar;
     if Look = LF then GetChar;
end;
{-----------------------------------------------}
{Get an Identifier}

procedure GetName;
var k: integer;
begin
     Value := '';
     if not IsAlpha(Look) then Expected('Name');
     while IsAlNum(Look) do begin
     Value := Value + UpCase(Look);
     GetChar;
     end;
     Token := KWcode[Lookup(Addr(KWlist), value, 4) + 1];
     end;
{-----------------------------------------------}
{Get a Number}

procedure GetNum;
begin
     Value := '';
     if not IsDigit(Look) then Expected('Integer');
     while IsDigit(Look) do begin
     Value := Value + Look;
     GetChar;
     end;
     Token := '#';
     end;

{-----------------------------------------------}
{Get an Operator}

procedure GetOp;
begin
     Value := '';
     if not IsOp(Look) then Expected('Operator');
     while IsOp(Look) do begin
     Value := Value + Look;
     GetChar;
     end;
     if Length(Value) = 1 then
     Token := Value[1];
end;
{-------------------------------------------------------}
{Skip Over a Comma}

procedure SkipComma;
begin
     SkipWhite;
     if Look = ','then begin
     GetChar;
     SkipWhite;
     end;
end;

{-------------------------------------------------------}
{Output a String with Tab}

procedure Emit(s: string);
begin
     Write(TAB, s);
end;

{-------------------------------------------------------}
{Output a string with Tab and CRLF}

procedure EmitLn(s: string);
begin
     Emit(s);
     WriteLn;
end;
{-------------------------------------------------------}
{Lexical Scanner}

procedure Scan;
var k: integer;
begin
     while Look = CR do
           Fin;
     if IsAlpha(Look) then
     GetName
     else if IsDigit(Look) then
     GetNum
     else if IsOp(Look) then
     GetOp
     else begin
     Value := Look;
     Token := '?';
     GetChar;
   end;
   SkipWhite;
end;

{-------------------------------------------------------}
{ Initialize }

procedure Init;
begin
     GetChar;
end;

{-------------------------------------------------------}
{Main Program}

begin


     Init;
     repeat
     Scan;
       case Token of
       'x': write('Ident ');
       '#': Write('Number ');
       'i', 'l', 'e': Write('KeyWord ');
       else Write('Operator ');
       end;
           WriteLn(Value);
           until Value = 'END';

end.








































